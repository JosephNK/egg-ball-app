plugins {
    id "com.android.application"
    id "kotlin-android"
    // The Flutter Gradle Plugin must be applied after the Android and Kotlin Gradle plugins.
    id "dev.flutter.flutter-gradle-plugin"
}

def localProperties = new Properties()
def localPropertiesFile = rootProject.file("local.properties")
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader("UTF-8") { reader ->
        localProperties.load(reader)
    }
}

def flutterVersionCode = localProperties.getProperty("flutter.versionCode")
if (flutterVersionCode == null) {
    flutterVersionCode = "1"
}

def flutterVersionName = localProperties.getProperty("flutter.versionName")
if (flutterVersionName == null) {
    flutterVersionName = "1.0"
}

def keystoreProperties = new Properties()
def keystorePropertiesFile = rootProject.file('key.properties')
if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}

android {
    namespace = "com.jospehnk.eggball"
    compileSdk = 34
    ndkVersion = flutter.ndkVersion

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId = "com.jospehnk.eggball"
        // You can update the following values to match your application needs.
        // For more information, see: https://docs.flutter.dev/deployment/android#reviewing-the-gradle-build-configuration.
        minSdk = 26
        targetSdk = 34
        versionCode = flutterVersionCode.toInteger()
        versionName = flutterVersionName
        manifestPlaceholders += [
                scheme: "eggball"
        ]
    }

    signingConfigs {
        release {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile keystoreProperties['storeFile'] ? file(keystoreProperties['storeFile']) : null
            storePassword keystoreProperties['storePassword']
        }
    }

    buildTypes {
        release {
            signingConfig signingConfigs.release
        }
    }

    flavorDimensions "build-type"
    productFlavors {
        production {
            dimension "build-type"
            //resValue "string", "app_name", "EggBall"
            applicationIdSuffix ""
            //versionCode 1
            //versionName "1.0.0"
            manifestPlaceholders.scheme = "eggball"
        }
        staging {
            dimension "build-type"
            //resValue "string", "app_name", "EggBall"
            applicationIdSuffix ".stg"
            //versionCode 1
            //versionName "1.0.0"
            manifestPlaceholders.scheme = "eggball_stg"
        }
        development {
            dimension "build-type"
            //resValue "string", "app_name", "EggBall"
            applicationIdSuffix ".dev"
            //versionCode 1
            //versionName "1.0.0"
            manifestPlaceholders.scheme = "eggball_dev"
        }
        qa {
            dimension "build-type"
            //resValue "string", "app_name", "EggBall"
            applicationIdSuffix ".test"
            //versionCode 1
            //versionName "1.0.0"
            manifestPlaceholders.scheme = "eggball_test"
        }
    }
}

flutter {
    source = "../.."
}
